// Generated by CoffeeScript 1.6.2
(function() {
  var Parser, alt, alternatives, grammar, name, o, operators, token, tokens, unwrap,
    __ayl_stackify = (function(){   if (typeof __ayl_stackified == "undefined") {     __ayl_stackified = false;     __ayl_stackified_last_error = null;   }   return (function(fn){     return function(){       if(__ayl_stackified) {         return fn['apply'](this, arguments);       } else {         var result;         try {           __ayl_stackified = true;           result = fn['apply'](this, arguments)         } catch(e) {           __ayl_stackified = false;           __ayl_stackified_last_error = e;           throw(e);         }         __ayl_stackified = false;         return result;       }     }   }); })();

  Parser = require('jison').Parser;

  unwrap = /^function\s*\(\)\s*\{\s*return\s*([\s\S]*);\s*\}/;

  o = (__ayl_stackify(function
/* TFLAGG2 */(patternString, action, options) {
    var addLocationDataFn, match, patternCount;

    patternString = patternString.replace(/\s{2,}/g, ' ');
    patternCount = patternString.split(' ').length;
    if (!action) {
      return [patternString, '$$ = $1;', options];
    }
    action = (match = unwrap.exec(action)) ? match[1] : "(" + action + "())";
    action = action.replace(/\bnew /g, '$&yy.');
    action = action.replace(/\b(?:Block\.wrap|extend)\b/g, 'yy.$&');
    addLocationDataFn = (__ayl_stackify(function
/* TFLAGG2 */(first, last) {
      if (!last) {
        return "yy.addLocationDataFn(@" + first + ")";
      } else {
        return "yy.addLocationDataFn(@" + first + ", @" + last + ")";
      }
    }));
    action = action.replace(/LOC\(([0-9]*)\)/g, addLocationDataFn('$1'));
    action = action.replace(/LOC\(([0-9]*),\s*([0-9]*)\)/g, addLocationDataFn('$1', '$2'));
    return [patternString, "$$ = " + (addLocationDataFn(1, patternCount)) + "(" + action + ");", options];
  }));

  grammar = {
    Root: [
      o('', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Block;
      }))), o('Body'), o('Block TERMINATOR')
    ],
    Body: [
      o('Line', (__ayl_stackify(function
/* TFLAGG2 */() {
        return Block.wrap([$1]);
      }))), o('Body TERMINATOR Line', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.push($3);
      }))), o('Body TERMINATOR')
    ],
    Line: [o('Expression'), o('Statement')],
    Statement: [
      o('Return'), o('Comment'), o('STATEMENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      })))
    ],
    Expression: [o('Value'), o('Invocation'), o('Code'), o('Operation'), o('Assign'), o('If'), o('Try'), o('While'), o('For'), o('Switch'), o('Class'), o('Throw')],
    Block: [
      o('INDENT OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Block;
      }))), o('INDENT Body OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2;
      })))
    ],
    Identifier: [
      o('IDENTIFIER', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      })))
    ],
    AlphaNumeric: [
      o('NUMBER', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      }))), o('STRING', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      })))
    ],
    Literal: [
      o('AlphaNumeric'), o('JS', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      }))), o('REGEX', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      }))), o('DEBUGGER', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Literal($1);
      }))), o('UNDEFINED', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Undefined;
      }))), o('NULL', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Null;
      }))), o('BOOL', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Bool($1);
      })))
    ],
    Assign: [
      o('Assignable = Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $3);
      }))), o('Assignable = TERMINATOR Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $4);
      }))), o('Assignable = INDENT Expression OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $4);
      })))
    ],
    AssignObj: [
      o('ObjAssignable', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('ObjAssignable : Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign(LOC(1)(new Value($1)), $3, 'object');
      }))), o('ObjAssignable :\
       INDENT Expression OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign(LOC(1)(new Value($1)), $4, 'object');
      }))), o('Comment')
    ],
    ObjAssignable: [o('Identifier'), o('AlphaNumeric'), o('ThisProperty')],
    Return: [
      o('RETURN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Return($2);
      }))), o('RETURN', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Return;
      })))
    ],
    Comment: [
      o('HERECOMMENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Comment($1);
      })))
    ],
    Code: [
      o('PARAM_START ParamList PARAM_END FuncGlyph Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Code($2, $5, $4);
      }))), o('FuncGlyph Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Code([], $2, $1);
      })))
    ],
    FuncGlyph: [
      o('->', (__ayl_stackify(function
/* TFLAGG2 */() {
        return 'func';
      }))), o('=>', (__ayl_stackify(function
/* TFLAGG2 */() {
        return 'boundfunc';
      })))
    ],
    OptComma: [o(''), o(',')],
    ParamList: [
      o('', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [];
      }))), o('Param', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$1];
      }))), o('ParamList , Param', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($3);
      }))), o('ParamList OptComma TERMINATOR Param', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      }))), o('ParamList OptComma INDENT ParamList OptComma OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      })))
    ],
    Param: [
      o('ParamVar', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Param($1);
      }))), o('ParamVar ...', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Param($1, null, true);
      }))), o('ParamVar = Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Param($1, $3);
      })))
    ],
    ParamVar: [o('Identifier'), o('ThisProperty'), o('Array'), o('Object')],
    Splat: [
      o('Expression ...', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Splat($1);
      })))
    ],
    SimpleAssignable: [
      o('Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('Value Accessor', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.add($2);
      }))), o('Invocation Accessor', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1, [].concat($2));
      }))), o('ThisProperty')
    ],
    Assignable: [
      o('SimpleAssignable'), o('Array', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('Object', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      })))
    ],
    Value: [
      o('Assignable'), o('Literal', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('Parenthetical', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('Range', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('This')
    ],
    Accessor: [
      o('.  Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Access($2);
      }))), o('?. Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Access($2, 'soak');
      }))), o(':: Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [LOC(1)(new Access(new Literal('prototype'))), LOC(2)(new Access($2))];
      }))), o('?:: Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [LOC(1)(new Access(new Literal('prototype'), 'soak')), LOC(2)(new Access($2))];
      }))), o('::', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Access(new Literal('prototype'));
      }))), o('Index')
    ],
    Index: [
      o('INDEX_START IndexValue INDEX_END', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2;
      }))), o('INDEX_SOAK  Index', (__ayl_stackify(function
/* TFLAGG2 */() {
        return extend($2, {
          soak: true
        });
      })))
    ],
    IndexValue: [
      o('Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Index($1);
      }))), o('Slice', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Slice($1);
      })))
    ],
    Object: [
      o('{ AssignList OptComma }', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Obj($2, $1.generated);
      })))
    ],
    AssignList: [
      o('', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [];
      }))), o('AssignObj', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$1];
      }))), o('AssignList , AssignObj', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($3);
      }))), o('AssignList OptComma TERMINATOR AssignObj', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      }))), o('AssignList OptComma INDENT AssignList OptComma OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      })))
    ],
    Class: [
      o('CLASS', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class;
      }))), o('CLASS Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class(null, null, $2);
      }))), o('CLASS EXTENDS Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class(null, $3);
      }))), o('CLASS EXTENDS Expression Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class(null, $3, $4);
      }))), o('CLASS SimpleAssignable', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class($2);
      }))), o('CLASS SimpleAssignable Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class($2, null, $3);
      }))), o('CLASS SimpleAssignable EXTENDS Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class($2, $4);
      }))), o('CLASS SimpleAssignable EXTENDS Expression Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Class($2, $4, $5);
      })))
    ],
    Invocation: [
      o('Value OptFuncExist Arguments', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Call($1, $3, $2);
      }))), o('Invocation OptFuncExist Arguments', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Call($1, $3, $2);
      }))), o('SUPER', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Call('super', [new Splat(new Literal('arguments'))]);
      }))), o('SUPER Arguments', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Call('super', $2);
      })))
    ],
    OptFuncExist: [
      o('', (__ayl_stackify(function
/* TFLAGG2 */() {
        return false;
      }))), o('FUNC_EXIST', (__ayl_stackify(function
/* TFLAGG2 */() {
        return true;
      })))
    ],
    Arguments: [
      o('CALL_START CALL_END', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [];
      }))), o('CALL_START ArgList OptComma CALL_END', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2;
      })))
    ],
    This: [
      o('THIS', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value(new Literal('this'));
      }))), o('@', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value(new Literal('this'));
      })))
    ],
    ThisProperty: [
      o('@ Identifier', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value(LOC(1)(new Literal('this')), [LOC(2)(new Access($2))], 'this');
      })))
    ],
    Array: [
      o('[ ]', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Arr([]);
      }))), o('[ ArgList OptComma ]', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Arr($2);
      })))
    ],
    RangeDots: [
      o('..', (__ayl_stackify(function
/* TFLAGG2 */() {
        return 'inclusive';
      }))), o('...', (__ayl_stackify(function
/* TFLAGG2 */() {
        return 'exclusive';
      })))
    ],
    Range: [
      o('[ Expression RangeDots Expression ]', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Range($2, $4, $3);
      })))
    ],
    Slice: [
      o('Expression RangeDots Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Range($1, $3, $2);
      }))), o('Expression RangeDots', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Range($1, null, $2);
      }))), o('RangeDots Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Range(null, $2, $1);
      }))), o('RangeDots', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Range(null, null, $1);
      })))
    ],
    ArgList: [
      o('Arg', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$1];
      }))), o('ArgList , Arg', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($3);
      }))), o('ArgList OptComma TERMINATOR Arg', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      }))), o('INDENT ArgList OptComma OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2;
      }))), o('ArgList OptComma INDENT ArgList OptComma OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($4);
      })))
    ],
    Arg: [o('Expression'), o('Splat')],
    SimpleArgs: [
      o('Expression'), o('SimpleArgs , Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [].concat($1, $3);
      })))
    ],
    Try: [
      o('TRY Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Try($2);
      }))), o('TRY Block Catch', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Try($2, $3[0], $3[1]);
      }))), o('TRY Block FINALLY Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Try($2, null, null, $4);
      }))), o('TRY Block Catch FINALLY Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Try($2, $3[0], $3[1], $5);
      })))
    ],
    Catch: [
      o('CATCH Identifier Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$2, $3];
      }))), o('CATCH Object Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [LOC(2)(new Value($2)), $3];
      })))
    ],
    Throw: [
      o('THROW Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Throw($2);
      })))
    ],
    Parenthetical: [
      o('( Body )', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Parens($2);
      }))), o('( INDENT Body OUTDENT )', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Parens($3);
      })))
    ],
    WhileSource: [
      o('WHILE Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While($2);
      }))), o('WHILE Expression WHEN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While($2, {
          guard: $4
        });
      }))), o('UNTIL Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While($2, {
          invert: true
        });
      }))), o('UNTIL Expression WHEN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While($2, {
          invert: true,
          guard: $4
        });
      })))
    ],
    While: [
      o('WhileSource Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.addBody($2);
      }))), o('Statement  WhileSource', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2.addBody(LOC(1)(Block.wrap([$1])));
      }))), o('Expression WhileSource', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2.addBody(LOC(1)(Block.wrap([$1])));
      }))), o('Loop', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1;
      })))
    ],
    Loop: [
      o('LOOP Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While(LOC(1)(new Literal('true'))).addBody($2);
      }))), o('LOOP Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new While(LOC(1)(new Literal('true'))).addBody(LOC(2)(Block.wrap([$2])));
      })))
    ],
    For: [
      o('Statement  ForBody', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new For($1, $2);
      }))), o('Expression ForBody', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new For($1, $2);
      }))), o('ForBody    Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new For($2, $1);
      })))
    ],
    ForBody: [
      o('FOR Range', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: LOC(2)(new Value($2))
        };
      }))), o('ForStart ForSource', (__ayl_stackify(function
/* TFLAGG2 */() {
        $2.own = $1.own;
        $2.name = $1[0];
        $2.index = $1[1];
        return $2;
      })))
    ],
    ForStart: [
      o('FOR ForVariables', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $2;
      }))), o('FOR OWN ForVariables', (__ayl_stackify(function
/* TFLAGG2 */() {
        $3.own = true;
        return $3;
      })))
    ],
    ForValue: [
      o('Identifier'), o('ThisProperty'), o('Array', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      }))), o('Object', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Value($1);
      })))
    ],
    ForVariables: [
      o('ForValue', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$1];
      }))), o('ForValue , ForValue', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [$1, $3];
      })))
    ],
    ForSource: [
      o('FORIN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2
        };
      }))), o('FOROF Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          object: true
        };
      }))), o('FORIN Expression WHEN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          guard: $4
        };
      }))), o('FOROF Expression WHEN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          guard: $4,
          object: true
        };
      }))), o('FORIN Expression BY Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          step: $4
        };
      }))), o('FORIN Expression WHEN Expression BY Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          guard: $4,
          step: $6
        };
      }))), o('FORIN Expression BY Expression WHEN Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return {
          source: $2,
          step: $4,
          guard: $6
        };
      })))
    ],
    Switch: [
      o('SWITCH Expression INDENT Whens OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Switch($2, $4);
      }))), o('SWITCH Expression INDENT Whens ELSE Block OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Switch($2, $4, $6);
      }))), o('SWITCH INDENT Whens OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Switch(null, $3);
      }))), o('SWITCH INDENT Whens ELSE Block OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Switch(null, $3, $5);
      })))
    ],
    Whens: [
      o('When'), o('Whens When', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.concat($2);
      })))
    ],
    When: [
      o('LEADING_WHEN SimpleArgs Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [[$2, $3]];
      }))), o('LEADING_WHEN SimpleArgs Block TERMINATOR', (__ayl_stackify(function
/* TFLAGG2 */() {
        return [[$2, $3]];
      })))
    ],
    IfBlock: [
      o('IF Expression Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new If($2, $3, {
          type: $1
        });
      }))), o('IfBlock ELSE IF Expression Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.addElse(new If($4, $5, {
          type: $3
        }));
      })))
    ],
    If: [
      o('IfBlock'), o('IfBlock ELSE Block', (__ayl_stackify(function
/* TFLAGG2 */() {
        return $1.addElse($3);
      }))), o('Statement  POST_IF Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new If($3, LOC(1)(Block.wrap([$1])), {
          type: $2,
          statement: true
        });
      }))), o('Expression POST_IF Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new If($3, LOC(1)(Block.wrap([$1])), {
          type: $2,
          statement: true
        });
      })))
    ],
    Operation: [
      o('UNARY Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op($1, $2);
      }))), o('-     Expression', ((__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('-', $2);
      }))), {
        prec: 'UNARY'
      }), o('+     Expression', ((__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('+', $2);
      }))), {
        prec: 'UNARY'
      }), o('-- SimpleAssignable', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('--', $2);
      }))), o('++ SimpleAssignable', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('++', $2);
      }))), o('SimpleAssignable --', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('--', $1, null, true);
      }))), o('SimpleAssignable ++', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('++', $1, null, true);
      }))), o('Expression ?', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Existence($1);
      }))), o('Expression +  Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('+', $1, $3);
      }))), o('Expression -  Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op('-', $1, $3);
      }))), o('Expression MATH     Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op($2, $1, $3);
      }))), o('Expression SHIFT    Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op($2, $1, $3);
      }))), o('Expression COMPARE  Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op($2, $1, $3);
      }))), o('Expression LOGIC    Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Op($2, $1, $3);
      }))), o('Expression RELATION Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        if ($2.charAt(0) === '!') {
          return new Op($2['slice'](1), $1, $3).invert();
        } else {
          return new Op($2, $1, $3);
        }
      }))), o('SimpleAssignable COMPOUND_ASSIGN\
       Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $3, $2);
      }))), o('SimpleAssignable COMPOUND_ASSIGN\
       INDENT Expression OUTDENT', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $4, $2);
      }))), o('SimpleAssignable COMPOUND_ASSIGN TERMINATOR\
       Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Assign($1, $4, $2);
      }))), o('SimpleAssignable EXTENDS Expression', (__ayl_stackify(function
/* TFLAGG2 */() {
        return new Extends($1, $3);
      })))
    ]
  };

  operators = [['left', '.', '?.', '::', '?::'], ['left', 'CALL_START', 'CALL_END'], ['nonassoc', '++', '--'], ['left', '?'], ['right', 'UNARY'], ['left', 'MATH'], ['left', '+', '-'], ['left', 'SHIFT'], ['left', 'RELATION'], ['left', 'COMPARE'], ['left', 'LOGIC'], ['nonassoc', 'INDENT', 'OUTDENT'], ['right', '=', ':', 'COMPOUND_ASSIGN', 'RETURN', 'THROW', 'EXTENDS'], ['right', 'FORIN', 'FOROF', 'BY', 'WHEN'], ['right', 'IF', 'ELSE', 'FOR', 'WHILE', 'UNTIL', 'LOOP', 'SUPER', 'CLASS'], ['right', 'POST_IF']];

  tokens = [];

  for (name in grammar) {
    alternatives = grammar[name];
    grammar[name] = ((__ayl_stackify(function
/* TFLAGG2 */() {
      var _i, _j, _len, _len1, _ref, _results;

      _results = [];
      for (_i = 0, _len = alternatives['length']; _i < _len; _i++) {
        alt = alternatives[_i];
        _ref = alt[0].split(' ');
        for (_j = 0, _len1 = _ref['length']; _j < _len1; _j++) {
          token = _ref[_j];
          if (!grammar[token]) {
            tokens.push(token);
          }
        }
        if (name === 'Root') {
          alt[1] = "return " + alt[1];
        }
        _results['push'](alt);
      }
      return _results;
    })))();
  }

  exports.parser = new Parser({
    tokens: tokens.join(' '),
    bnf: grammar,
    operators: operators.reverse(),
    startSymbol: 'Root'
  });

})['call'](this);
