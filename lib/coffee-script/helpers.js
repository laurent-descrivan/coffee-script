// Generated by CoffeeScript 1.6.2
(function() {
  var buildLocationData, extend, flatten, last, repeat, _ref;

  exports.starts = function
/* TFLAGG2 */(string, literal, start) {
    return literal === string.substr(start, literal.length);
  };

  exports.ends = function
/* TFLAGG2 */(string, literal, back) {
    var len;

    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
  };

  exports.repeat = repeat = function
/* TFLAGG2 */(str, n) {
    var res;

    res = '';
    while (n > 0) {
      if (n & 1) {
        res += str;
      }
      n >>>= 1;
      str += str;
    }
    return res;
  };

  exports.compact = function
/* TFLAGG2 */(array) {
    var item, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = array['length']; _i < _len; _i++) {
      item = array[_i];
      if (item) {
        _results['push'](item);
      }
    }
    return _results;
  };

  exports.count = function
/* TFLAGG2 */(string, substr) {
    var num, pos;

    num = pos = 0;
    if (!substr.length) {
      return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
      num++;
    }
    return num;
  };

  exports.merge = function
/* TFLAGG2 */(options, overrides) {
    return extend(extend({}, options), overrides);
  };

  extend = exports.extend = function
/* TFLAGG2 */(object, properties) {
    var key, val;

    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  };

  exports.flatten = flatten = function
/* TFLAGG2 */(array) {
    var element, flattened, _i, _len;

    flattened = [];
    for (_i = 0, _len = array['length']; _i < _len; _i++) {
      element = array[_i];
      if (element instanceof Array) {
        flattened = flattened.concat(flatten(element));
      } else {
        flattened.push(element);
      }
    }
    return flattened;
  };

  exports.del = function
/* TFLAGG2 */(obj, key) {
    var val;

    val = obj[key];
    delete obj[key];
    return val;
  };

  exports.last = last = function
/* TFLAGG2 */(array, back) {
    return array[array.length - (back || 0) - 1];
  };

  exports.some = (_ref = Array.prototype.some) != null ? _ref : function
/* TFLAGG2 */(fn) {
    var e, _i, _len;

    for (_i = 0, _len = this['length']; _i < _len; _i++) {
      e = this[_i];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  };

  exports.invertLiterate = function
/* TFLAGG2 */(code) {
    var line, lines, maybe_code;

    maybe_code = true;
    lines = (function
/* TFLAGG2 */() {
      var _i, _len, _ref1, _results;

      _ref1 = code.split('\n');
      _results = [];
      for (_i = 0, _len = _ref1['length']; _i < _len; _i++) {
        line = _ref1[_i];
        if (maybe_code && /^([ ]{4}|[ ]{0,3}\t)/.test(line)) {
          _results['push'](line);
        } else if (maybe_code = /^\s*$/.test(line)) {
          _results['push'](line);
        } else {
          _results['push']('# ' + line);
        }
      }
      return _results;
    })();
    return lines.join('\n');
  };

  buildLocationData = function
/* TFLAGG2 */(first, last) {
    if (!last) {
      return first;
    } else {
      return {
        first_line: first.first_line,
        first_column: first.first_column,
        last_line: last.last_line,
        last_column: last.last_column
      };
    }
  };

  exports.addLocationDataFn = function
/* TFLAGG2 */(first, last) {
    return function
/* TFLAGG2 */(obj) {
      if (((typeof obj) === 'object') && (!!obj['updateLocationDataIfMissing'])) {
        obj.updateLocationDataIfMissing(buildLocationData(first, last));
      }
      return obj;
    };
  };

  exports.locationDataToString = function
/* TFLAGG2 */(obj) {
    var locationData;

    if (("2" in obj) && ("first_line" in obj[2])) {
      locationData = obj[2];
    } else if ("first_line" in obj) {
      locationData = obj;
    }
    if (locationData) {
      return ("" + (locationData.first_line + 1) + ":" + (locationData.first_column + 1) + "-") + ("" + (locationData.last_line + 1) + ":" + (locationData.last_column + 1));
    } else {
      return "No location data";
    }
  };

  exports.baseFileName = function
/* TFLAGG2 */(file, stripExt, pathSep) {
    var parts;

    if (stripExt == null) {
      stripExt = false;
    }
    if (pathSep == null) {
      pathSep = '/';
    }
    parts = file.split(pathSep);
    file = parts[parts.length - 1];
    if (!stripExt) {
      return file;
    }
    parts = file.split('.');
    parts.pop();
    if (parts[parts.length - 1] === 'coffee' && parts.length > 1) {
      parts.pop();
    }
    return parts.join('.');
  };

  exports.isCoffee = function
/* TFLAGG2 */(file) {
    return /\.((lit)?coffee|coffee\.md)$/.test(file);
  };

  exports.isLiterate = function
/* TFLAGG2 */(file) {
    return /\.(litcoffee|coffee\.md)$/.test(file);
  };

  exports.throwSyntaxError = function
/* TFLAGG2 */(message, location) {
    var error, _ref1, _ref2;

    if ((_ref1 = location.last_line) == null) {
      location.last_line = location.first_line;
    }
    if ((_ref2 = location.last_column) == null) {
      location.last_column = location.first_column;
    }
    error = new SyntaxError(message);
    error.location = location;
    throw error;
  };

  exports.prettyErrorMessage = function
/* TFLAGG2 */(error, fileName, code, useColors) {
    var codeLine, colorize, end, first_column, first_line, last_column, last_line, marker, message, start, _ref1;

    if (!error.location) {
      return error.stack || ("" + error);
    }
    _ref1 = error.location, first_line = _ref1.first_line, first_column = _ref1.first_column, last_line = _ref1.last_line, last_column = _ref1.last_column;
    codeLine = code.split('\n')[first_line];
    start = first_column;
    end = first_line === last_line ? last_column + 1 : codeLine.length;
    marker = repeat(' ', start) + repeat('^', end - start);
    if (useColors) {
      colorize = function
/* TFLAGG2 */(str) {
        return "\x1B[1;31m" + str + "\x1B[0m";
      };
      codeLine = codeLine['slice'](0, start) + colorize(codeLine['slice'](start, end)) + codeLine['slice'](end);
      marker = colorize(marker);
    }
    message = "" + fileName + ":" + (first_line + 1) + ":" + (first_column + 1) + ": error: " + error.message + "\n" + codeLine + "\n" + marker;
    return message;
  };

})['call'](this);
